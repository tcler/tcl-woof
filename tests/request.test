#
# Copyright (c) 2009, Ashok P. Nadkarni
# All rights reserved.
#
# See the file LICENSE for license

# This file contains tests for the Request object

package require tcltest
package require http
package require tdom

source [file join [file dirname [info script]] testutil.tcl]
::woof::test::read_config

namespace eval ::woof::test::request {
    namespace import ::tcltest::test
    namespace path ::woof::test
    variable dom;      # What we get back in DOM form
    namespace upvar ::woof::test config config

    proc request_setup {{query ""} {headers {}}} {
        variable dom
        if {[info exists dom]} {
            $dom delete
            unset dom
        }
        set tok [http::geturl [make_test_url "_woof/test/request/dump" $query] -headers $headers]
        if {[http::ncode $tok] ne 200} {
            error "Server returned HTTP code [http::code $tok][http::cleanup $tok]"
        }
        set dom [dom parse -keepEmpties -html [http::data $tok]]
        http::cleanup $tok
    }

    proc host_and_port {host port} {
        # If port is "" or default, it is not included in the returned string
        if {$port eq "" || $port == 80} {
            return $host
        } else {
            return "${host}:${port}"
        }
    }
    proc dom_field {id} {
        variable dom
        return [[lindex [$dom selectNodes "//dd\[@id='$id']"]  0] text]
    }

    foreach {method_name mode expected_value query_expected_value} \
        [list \
             application_url exact $config(-urlroot) "" \
             delete?         boolean false "" \
             formatted_host_with_port exact [host_and_port $config(-host) $config(-port)] "" \
             get?            boolean true            "" \
             get_or_head?    boolean true            "" \
             host            exact   $config(-host) "" \
             port            exact   $config(-port) "" \
             post?           boolean false           "" \
             protocol        exact   $config(-scheme) ""\
             query_string    exact   ""              a=b&=d \
             referer         exact   ""              "" \
             remote_addr     exact   127.0.0.1       "" \
             request_method  exact   get             "" \
             request_uri     exact   [file join $config(-urlroot) _woof/test request/dump] "?a=b&=d" \
             resource_url    exact   "/[file join _woof/test request/dump]" "" \
             ssl?            boolean [expr {$config(-scheme) == "https"}] "" \
             standard_port   exact   [expr {$config(-scheme) == "https" ? 443 : 80}] "" \
             url             exact   [make_test_url [file join $config(-urlroot) _woof/test request dump]] "?a=b&=d"
            ] { 
                eval [format {
                    test request-%1$s-1.0 {
                        Testing %1$s method in Request object
                    } -setup {
                        request_setup
                    } -body {
                        dom_field "%1$s"
                    } -result "%2$s" -match $mode
                } $method_name $expected_value ]

                eval [format {
                    test request-%1$s-1.1 {
                        Testing %1$s method in Request object when query present in URL
                    } -setup {
                        request_setup a=b&=d
                    } -body {
                        dom_field "%1$s"
                    } -result "%2$s" -match $mode
                } $method_name $expected_value$query_expected_value ]
            }
    
    test request-referer-2.0 {
        Testing referer when Referer header is present
    } -setup {
        request_setup "" [list Referer http://www.google.com]
    } -body {
        dom_field "referer"
    } -result http://www.google.com -match exact

     ################################################################

    if {[info exists dom]} {
        $dom delete
        unset dom
    }
    tcltest::cleanupTests
}
