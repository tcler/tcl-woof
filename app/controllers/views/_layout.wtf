% # NOTE
% # In order to avoid conflicts with application variable names,
% # the layout uses all uppercase names for local variables.

% # Start off with the boilerplate HTML
<!doctype html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>[pagevar get title [config :app_name]]</title>
    <link rel="stylesheet" href="http://yui.yahooapis.com/pure/0.5.0/pure-min.css">
%(
set IE_COMPAT {

    <!--[if lte IE 8]>
	<link rel="stylesheet" href="http://yui.yahooapis.com/pure/0.5.0/grids-responsive-old-ie-min.css">
    <![endif]-->
    <!--[if gt IE 8]><!-->
	<link rel="stylesheet" href="http://yui.yahooapis.com/pure/0.5.0/grids-responsive-min.css">
    <!--<![endif]-->

    <!--[if lt IE 9]>
	<script src="http://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7/html5shiv.js"></script>
    <![endif]-->
}
%)

$IE_COMPAT

% foreach URL [pagevar get scripts {}] {
%   # Does this need to be hesc'ed ?
<script src='$URL' type='text/javascript'></script>
% }

[my include_stylesheet _layout.css]
% foreach URL [pagevar get stylesheets {}] {
    <link href='$URL' rel='stylesheet' type='text/css'>
% }

</head>


%(
  # Figure out what layout is to be used

  # Note the order of sections is important for non-responsive
  # layout to come out right
  set SECTION_ORDER {header sidebar main supplement footer}

  # Defaults
  set LAYOUT {
      header {tag header cssclasses wf-header}
      footer {tag footer cssclasses wf-footer}
      main {tag main cssclasses wf-main}
      sidebar {tag nav cssclasses wf-sidebar}
      supplement {tag aside cssclasses wf-supplement}
  }

  set SECTIONS [pagevar get sections $SECTION_ORDER]
  set RESPONSIVE_THRESHOLD ""
  if {[pagevar exists responsive_settings RESPONSIVE_SETTINGS]} {
      if {[dict exists $RESPONSIVE_SETTINGS sections]} {
          set RESPONSIVE_SECTIONS [dict get $RESPONSIVE_SETTINGS sections]
      } else {
          set RESPONSIVE_SECTIONS $SECTIONS
      }
      if {[dict exists $RESPONSIVE_SETTINGS threshold]} {
          set RESPONSIVE_THRESHOLD [dict get $RESPONSIVE_SETTINGS threshold]
      } else {
          set RESPONSIVE_THRESHOLD sm
      }
  }


  array set WIDTHS [dict merge {sidebar 1 supplement 1 main 3} [pagevar get widths {}]]
  set WIDTHS(total) [expr {$WIDTHS(sidebar) + $WIDTHS(supplement) + $WIDTHS(main)}]
%)


<body>

<div class='pure-g'>
%(
  foreach SECT $SECTIONS {
      page fetch $SECT CONTENT($SECT)
  }
  set PUREU(header) "pure-u-1-1"
  set PUREU(footer) "pure-u-1-1"
  if {[info exists CONTENT(main)]} {
      if {[info exists CONTENT(sidebar)] &&
          [info exists CONTENT(supplement)]} {
          if {$RESPONSIVE_THRESHOLD ne ""} {
              set PUREU(main) "pure-u-1 pure-u-${RESPONSIVE_THRESHOLD}-$WIDTHS(main)-$WIDTHS(total)"
              set PUREU(supplement) "pure-u-1 pure-u-${RESPONSIVE_THRESHOLD}-$WIDTHS(supplement)-$WIDTHS(total)"
              set PUREU(sidebar) "pure-u-1 pure-u-${RESPONSIVE_THRESHOLD}-$WIDTHS(sidebar)-$WIDTHS(total)"
          } else {
              set PUREU(main) "pure-u-$WIDTHS(main)-$WIDTHS(total)"
              set PUREU(supplement) "pure-u-$WIDTHS(supplement)-$WIDTHS(total)"
              set PUREU(sidebar) "pure-u-$WIDTHS(sidebar)-$WIDTHS(total)"
          }
      } elseif {[info exists CONTENT(sidebar)]} {
          incr WIDTHS(main) $WIDTHS(supplement)
          if {$RESPONSIVE_THRESHOLD ne ""} {
              set PUREU(main) "pure-u-1 pure-u-${RESPONSIVE_THRESHOLD}-$WIDTHS(main)-$WIDTHS(total)"
              set PUREU(sidebar) "pure-u-1 pure-u-${RESPONSIVE_THRESHOLD}-$WIDTHS(sidebar)-$WIDTHS(total)"
          } else {
              set PUREU(main) "pure-u-$WIDTHS(main)-$WIDTHS(total)"
              set PUREU(sidebar) "pure-u-$WIDTHS(sidebar)-$WIDTHS(total)"
          }
      } elseif {[info exists CONTENT(supplement)]} {
          incr WIDTHS(main) $WIDTHS(sidebar)
          if {$RESPONSIVE_THRESHOLD ne ""} {
              set PUREU(main) "pure-u-1 pure-u-${RESPONSIVE_THRESHOLD}-$WIDTHS(main)-$WIDTHS(total)"
              set PUREU(supplement) "pure-u-1 pure-u-${RESPONSIVE_THRESHOLD}-$WIDTHS(supplement)-$WIDTHS(total)"
          } else {
              set PUREU(main) "pure-u-$WIDTHS(main)-$WIDTHS(total)"
              set PUREU(supplement) "pure-u-$WIDTHS(supplement)-$WIDTHS(total)"
          }
      } else {
          set PUREU(main) "pure-u-1-1"
      }
  } else {
      # No main section. Should we add its width somewhere as we do above?
      if {[info exists CONTENT(sidebar)] && [info exists CONTENT(supplement)]} {
          if {$RESPONSIVE_THRESHOLD ne ""} {
              set PUREU(supplement) "pure-u-1 pure-u-${RESPONSIVE_THRESHOLD}-$WIDTHS(supplement)-$WIDTHS(total)"
              set PUREU(sidebar) "pure-u-1 pure-u-${RESPONSIVE_THRESHOLD}-$WIDTHS(sidebar)-$WIDTHS(total)"
          } else {
              set PUREU(supplement) "pure-u-$WIDTHS(supplement)-$WIDTHS(total)"
              set PUREU(sidebar) "pure-u-$WIDTHS(sidebar)-$WIDTHS(total)"
          }
      } elseif {[info exists CONTENT(sidebar)]} {
          # Only one of these two will be actually used
          set PUREU(sidebar) "pure-u-1-1"
          set PUREU(supplement) "pure-u-1-1"
      }
  }
%)

%(
  # Note the order of sections is important for layout to come out right
  foreach SECT $SECTION_ORDER {
      if {[info exists CONTENT($SECT)]} {
          set SECT_SETTINGS [pagevar get $SECT {}]
          set CSSCLASSES [dict get $LAYOUT $SECT cssclasses]
          if {[dict exists $SECT_SETTINGS cssclasses]} {
              set SECT_CSSCLASSES [dict get $SECT_SETTINGS cssclasses]
              if {[lindex $SECT_CSSCLASSES 0] eq "+"} {
                  lappend CSSCLASSES {*}[lrange $SECT_CSSCLASSES 1 end]
              } else {
                  set CSSCLASSES $SECT_CSSCLASSES
              }
          }
          if {[dict exists $SECT_SETTINGS tag]} {
              set tag [dict get $SECT_SETTINGS tag]
          } else {
              set tag [dict get $LAYOUT $SECT tag]
          }
%)
          <$tag class='$PUREU($SECT) $CSSCLASSES'>
              $CONTENT($SECT)
          </$tag>
%(
      }
  }
%)


% # <div pure-g>
</div>

</body>
</html>
