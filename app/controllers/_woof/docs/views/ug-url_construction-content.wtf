<p>Applications often need to generate links to the URL's
  corresponding to controllers and actions. For example, a listing of
  all support tickets would need to generate a link to a URL similar to</p>
<pre>
  <span class='ug-filename'>http://www.mycompany.com/support/ticket/display/123</span>
</pre>

<p>These URL's could be generated by hard coding the entire URL except
  the ticket id. However, this is not desirable for several
  reasons. For example, if the application is relocated to reside at a
  different toplevel location, all such links have to modified. Similarly,
  if the [my _chapter_link routes "route maps"] change, then all
  such links have to be made consistent.</p>

<p>Instead, links should be dynamically generated at runtime based on
  where the application resides. Rather than forcing the application
  to individually retrieve the various URL components and build it
  piecemeal, Woof! provides URL and link generation commands that make
  this simple to do. For example, the page template for the above
  link may have the fragment</p>
[my _code_sample {
  <a href='[my url_for -action edit -parameters [params get]]'>Edit</a>
}]

<p>This would result in a link being inserted into the generated page
  that would point to the URL</p>
<pre>
  <span class='ug-filename'>http://www.mycompany.com/support/ticket/edit/123</span>
</pre>

<p>If at some point the application was moved to
<span class='ug-filename'>customers</span>, the generated link would
correctly point to</p>
<pre>
  <span class='ug-filename'>http://www.mycompany.com/customers/ticket/edit/123</span>
</pre>
<p>without any code having to be modified.</p>

<h3>The <code>url_for</code> method</h3>

<p>The [my _manpage_link ::woof::Controller::url_for] method
  constructs a URL based on the supplied criteria and using defaults
  based on the current controller context. For example, when the
  abovementioned URL is being processed by the <code>Ticket</code>
  controller (including any template processing), the controller
  context includes the host specification
  <span class='ug-filename'>http://www.mycompany.com</span>,
  the application root <span class='ug-filename'>/support</span>, the
  module, non-existent in this case, the controller
  <span class='ug-filename'>ticket</span> and action
  <span class='ug-filename'>display</span>.</p>

% set arrow "&#x2192;"
<p>Under this context, the method will return the following values:</p>
[my _code_sample {
  my url_for -fullyqualify true -parameters {id 456}
  &nbsp;&nbsp;&#x2192; http://www.mycompany.com/customers/ticket/display/456
} false]

<p>Only the parameter <code>123</code> is changed to <code>456</code>
  while everything else is unchanged as it is taken from the current
  controller context.</p>

<p>If the <code>-fullyqualify</code> option was not specified,</p>
[my _code_sample {
  my url_for -parameters {id 456}
  &nbsp;&nbsp;&#x2192; 456
} false]

<p>a URL, relative to the one specified by the client to access the
  current controller context, is returned. When resolved by the
  client, note this will resolve to the same URL as the fully
  qualified one above.</p>

<p>You can specify a different action within the same controller,</p>
[my _code_sample {
  my url_for -fullyqualify true -action edit -parameters {id 123}
  &nbsp;&nbsp;&#x2192; http://www.mycompany.com/customers/ticket/edit/123
  my url_for -action edit -parameters {id 123}
  &nbsp;&nbsp;&#x2192; ../edit/123
} false]

<p>or to an action within a different controller (assumes routes have
  been appropriately defined)
[my _code_sample {
  my url_for -fullyqualify true -controller customer -parameters {name Acme}
  &nbsp;&nbsp;&#x2192; http://www.mycompany.com/support/customer/index/Acme
  my url_for -controller customer -parameters {name Acme}
  &nbsp;&nbsp;&#x2192; ../../index/Acme
} false]

<p>Note in this last example that even though we did not specify the
  <code>-action</code> option, the action method in the URL was
  changed to <code>index</code>. This is because <code>url_for</code>
  assumes that if you change the controller without specifying the
  action, the default action for the controller is to be used rather
  than the current action.</p>

<p><code>url_for</code> has several additional options. See its
  [my _manpage_link ::woof::Controller::url_for "reference documentation"] 
  for more information. Several additional utility commands are
  layered on top of <code>url_for</code>. They are described
  elsewhere in this guide.</p>
