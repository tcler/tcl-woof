<p>The <a href="http://python.ca/scgi/protocol.txt">Simple Common
Gateway Interface</a> (SCGI) is a standard for communication
between web servers and application servers on the back end. It has
several performance advantages over CGI. This chapter describes
configuring Apache to use SCGI to communicate with a Woof!
application server on the back end. The process of running Woof! as a
SCGI application server is described in
[my _chapter_link start_scgi].</p>

<p>SCGI is not a standard part of the Apache distribution and you need
to install the <code>mod_scgi</code> Apache module to support it. Some
service providers may not have it available and may not be willing to
install it. A workaround is described later.</p>
<p>The steps below assume you are installing on a Linux or Unix
system. Installation on Windows is substantially identical except for
path differences.</p>
<h3>Assumptions</h3>
<p>This scenario makes the following assumptions:</p>
<ul>
  <li>This is a dedicated server and you have full control over the
    Apache configuration files.</li>
    <li>The server only hosts the Woof! application and nothing
    else.</li>
    <li>The application is rooted at the top level,
    i.e. <span class="wf_filename">http://www.mysite.com</span> is
    the entry point into the application.</li>
    <li>You have the means to modify the system configuration so that
    the Woof! SCGI server is started automatically either at boot time
    or when Apache is started.</li>
</ul>
<h3>Step 1 - install <code>mod_scgi</code></h3>
<p>The SCGI source code can be downloaded from
the <a href="http://python.ca/scgi/">SCGI home page</a>. Follow the
instructions in the README.txt file in
the <span class="wf_filename">apache2</span> directory in the SCGI
distribution to build and install the module. Note this requires you
to have the Apache build tools on your system. For Windows systems,
you can either
<a href="http://woof.magicsplat.com/blog/build_apache_module_on_windows">build
using Visual C++</a> or you can download prebuilt binaries from
the <a href="http://sourceforge.net/project/showfiles.php?group_id=250256">Woof!
download page</a>.</p>
<p>After installation,
the <span class="wf_filename">mod_scgi.so</span> module should reside
in the Apache <span class="wf_filename">modules</span> directory. The
final SCGI installation step is to add the following line to the
<span class='wf_filename'>httpd.conf</span> or equivalent.</p>
[my _code_sample {
LoadModule scgi_module modules/mod_scgi.so
}]
<h3>Step 2 - install Woof!</h3>
<p>The next step is to install Woof! for Apache and SCGI
using the [my _chapter_link installer "installer script"].
[my _code_sample {
~/woof-dist> tclsh scripts/installer.tcl install apache scgi -installdir /var/myapp
}]
<p>This will create the Woof! 
[my _chapter_link directory_structure "directory structure"]
under <span class="wf_filename">/var/myapp</span>. In
particular, the <span class="wf_filename">/var/myapp/public</span>
will contain the publically accessible directory tree that will be the
document root for the dedicated web server. Its subdirectories are
intended to be directly served by Apache without going through Woof!
as detailed below.</p>
<h3>Step 3 - set the document root</h3>
<p>Since this is the only application on the server, the document root
for Apache must be changed to point to the Woof! public directory by
editing the definition of DocumentRoot
in <span class="wf_filename">httpd.conf</span>.</p>
[my _code_sample {
DocumentRoot /var/myapp/public
<Directory "/var/myapp/public">
    Order allow,deny
    Allow from all
</Directory>
}]
<p>Note that the document root points to
the <span class="wf_filename">public</span> subdirectory, <em>not</em>
the Woof! root directory. By default, Apache will now look under
the <span class="wf_filename">/var/myapp/public</span> directory to
locate URL resources.</p>
<h3>Step 4 - configure SCGI</h3>
<p>Apache has to be told the SCGI server by adding the following
to <span class="wf_filename">httpd.conf</span>:</p>
[my _code_sample {
SCGIMount / 127.0.0.1:9999
<LocationMatch "/stylesheets|images/">
    SCGIHandler Off
</LocationMatch>
}]
<p>The <code>SCGIMount</code> directive has two purposes. First, it
tells Apache that all URL's starting at the
root <span class="wf_filename">/</span> are to be passed to the SCGI
server. Second, it indicates that the Woof! SCGI server is to be
contacted on port 9999 on the local system. The
<a href="http://httpd.apache.org/docs/2.2/mod/core.html#locationmatch"><code>LocationMatch</code></a>
directive is used to disable SCGI for requests
under <span class="wf_filename">/stylesheets</span>
and <span class="wf_filename">/images</span> so that static files are
served by Apache without going through the Woof! SCGI server.</p>

<p>If instead of having the Woof! application root
at <span class="wf_filename">/</span> we
had <span class="wf_filename">/myapp</span> as the application root
URL, the above lines would need to be changed as follows:</p>
[my _code_sample {
AliasMatch /myapp/((stylesheets|images)/.*) "/var/myapp/public/$1"
SCGIMount /myapp 127.0.0.1:9999
<LocationMatch "/myapp/stylesheets|images/">
    SCGIHandler Off
</LocationMatch>
}]
<p>Note that both <code>SCGIMount</code> as well as
the <code>LocationMatch</code> lines have to be modified when the
application root URL is changed. In addition, <code>AliasMatch</code>
and <code>Directory</code> directives are needed to point to the
Woof! <span class="wf_filename">public</span> directory in order to
retrieve static files.</p>
<h3>Step 5 - starting the SCGI server</h3>
<p>The Woof! SCGI server script that handles connections passed by
Apache needs to be started whenever Apache runs. This step is actually
independent of the web server and is described
in [my _chapter_link start_scgi].</p>
<h3>Completing the installation</h3>
<p>Once the steps described there are done, configuration is
complete. You can now move on to 
[my _chapter_link installation_final_steps "completing the installation"].</p>
<h3><a name="cgi2scgi">Using SCGI in a shared hosting environment</a></h3>
<p>Using SCGI as described above is not possible in a shared hosting
environment if your service provider is not willing to add the SCGI
module to the Apache configuration. <strong><em>Document the cgi2scgi
adapter</em></strong></p>
