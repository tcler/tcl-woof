<h3>Controlling section visibility</h3>

<p>All sections in the default layout are optional. 
  Sections for whom no template exists and which have not been 
  [my _chapter_link page_section_direct "directly stored"]
  are automatically omitted from the generated Web page.
</p>

<p>
  Moreover, if a controller wants to make the visibility of a section
  a runtime decision, it can do so by setting the 
  <code>sections</code> key in
  [my _chapter_link pagevar_object "<code>pagevar</code>"]. For example,
</p>
[my _code_sample {
 pagevar set sections {header main}
}]
<p>
will hide the sidebar, supplement and footer sections even if templates
are defined for them. This can be set any time in the controller or
action method before the page is rendered.
</p>
<p>Woof! uses the [my _chapter_link purecss "Pure CSS"] stylesheets to provide
  the underlying styles infrastructure for the default layout. The appropriate
  style classes are chosen based on which page sections being present.</p>

<h3>Tailoring each section</h3>
<p>
Each individual section in the default layout can also be customized 
to some degree through
the corresponding key of the same name in
[my _chapter_link pagevar_object "<code>pagevar</code>"]. The value
should be a dictionary containing the settings for the section. For example,
</p>
[my _code_sample {
 pagevar set sidebar {tag aside cssclasses {+ appcss pure-skin-app}}
}]
<p>
  The above specifies that the <code>aside</code> tag be used for the
  <code>sidebar</code> section and the specified CSS classes be added to 
  it.
<p>
  The <code>pagevar</code> element as well as individual settings are all
  optional and defaults are used for missing values. The table below shows
  the settings and defaults.
</p>
%(
  set table_def {
      {
          <code>cssclasses</code>
          {
              By default, the tags used to wrap the page sections
              <code>header</code>,
              <code>footer</code>, <code>main</code>, <code>sidebar</code>
              and <code>supplement</code> are added to the CSS classes
              <code>wf-header</code>, <code>wf_footer</code>,
              <code>wf-main</code>, <code>wf_sidebar</code> and
              <code>wf-supplement</code> respectively. If the
              dictionary contains <code>cssclasses</code>, its value
              should be a list (possibly empty) of CSS class names that will
              replace the default class. As a special case, if the first
              element of this list is <code>+</code>, the remaining list
              elements will
              be added to the default instead of replacing it.
          }
      }
      {
          <code>tag</code>
          {
              The HTML tag to use wrap the section. The <code>header</code>,
              <code>footer</code>, <code>main</code>, <code>sidebar</code>
              and <code>supplement</code> default to the
              <code>header</code>, <code>footer</code>, <code>main</code>,
              <code>nav</code> and <code>aside</code> HTML tags respectively.}
      }
  }
%)
[woof::pure::table $table_def -heading {Setting Description} -raw 1 -stripes 1]

<h3>Styling individual sections</h3>
<p>
  The CSS classes have a default style defined in the file 
  [my _filename public/stylesheets/_layout.css] that is 
  always loaded by the default layout. The
  application can override or modify these classes
  as desired in a separate CSS file and arrange for it to be loaded
  as described in [my _chapter_link using_stylesheets].
</p>
<p>
  The CSS classes [my _code wf-header] and [my _code wf-footer]
  that define the styles for the corresponding sections are essentially
  placeholders and do not define any CSS attributes for the sections
  beyond those defined by Pure CSS. The CSS classes 
  [my _code wf-sidebar], [my _code wf-main] and [my _code wf-supplement]
  on the other hand do define a padding for the corresponding sections.
  This difference is based on how those sections are expected to be
  used by the application. These settings can of course be overridden 
  as described above.
</p>

<h3 id='#widths'>Controlling section widths</h3>
<p>
If present, the header and footer sections of the default layout always occupy
the entire width of the browser window. The sidebar, main and supplement
sections on the other hand share the width of the browser window.
The mechanism for apportioning space to each is based on the Pure CSS
grid system.
</p>

<p class='uf-note'>
We only outline Pure CSS grid capabilities that are required for our
purposes here. For a full description see 
<a href='http://purecss.io/grids/'>Pure CSS Grids</a> page.
</p>

<p>
Pure CSS grids divide the browser page into a number of columns
of equal widths. The Pure CSS distribution comes with built-in support
for 5- and 24-column grids but also provides a tool that lets you
define grids for an arbitrary number of columns.
</p>

<p>
By default, Woof! uses a 5 column grid with the sidebar and supplement
sections taking up a column each and the main section occupying the
remaining three. An application may however change this by setting
[my _code widths] in the 
[my _chapter_link pagevar_object [my _code pagevar]]
to a dictionary whose keys are section names with corresponding values
being the number of columns in the section. Any unspecified sections
will be defaulted as above but it is good practice to explicitly
specify all section widths.
</p>
<p>
The fragment below sets up a 24-column page grid with the sidebar and 
supplement being five columns each and the main column taking up
the remaining fourteen.
</p>
[my _code_sample {
   pagevar set widths {
       sidebar    5
       main      14
       supplement 5
   }
}]

[my _note {
The sum of the columns must total 5 or 24 if you are using the built-in
grids. However, Woof! does not check this since you may have customized
Pure CSS for a different grid width.
}]


<h3>Responsive layouts</h3>
The default layout can also be tailored to display differently based
on the client browser dimensions. This is discussed separately as
part of a broader discussion in the
[my _chapter_link responsive_web_design] chapter.
