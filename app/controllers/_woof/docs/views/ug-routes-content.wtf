<p>There may be situations where the desired URL format does not satisfy
  the assumptions behind Woof!'s
  [my _chapter_link default_dispatcher "default URL mapping"].
  For example, you may want the URL</p>
<pre>
  <span class='ug-filename'>http://www.mycompany.com/support/ticket/display/123</span>
</pre>
<p>to display the page corresponding to support ticket #123. This URL
  cannot be mapped to the appropriate controller by the
  default URL mapping since the mapping algorithm
  expects the action method to be the last
  component in the URL. In the above case the last component is actually
  the ticket number. Woof! allows such URL's to be handled through the
  definition of <em>URL routes</em>. Woof! will first check
  these route definitions for a match before falling back to the
  default mapping algorithm.
</p>

<h3>Route definition file</h3>
<p>Woof! reads the URL route definitions from the file
<span class='ug-filename'>routes.cfg</span> in the
<span class='ug-filename'>config</span> subdirectory. This file is 
is expected to contain Tcl code and is executed in a temporary
safe Tcl interpreter. The file may contain any Tcl code compatible
with safe interpreters. A route is defined through the
<code>curl</code> command which has the following format:
[my _code_sample {
curl CURL ACTIONS PURL
}]

<p>An example of a route is</p>
[my _code_sample {
curl /finance/companies {profile quote} symbol
}]

<p>This route will match application URL paths of the form
<span class='ug-filename'>/finance/companies/quote/csco</span> or
<span class='ug-filename'>/finance/companies/profile/BRK.A</span> and
invoke the <code>quote</code> or <code>profile</code> action in the controller
<code>finance::Companies</code> passing it a parameter <code>symbol</code>
containing <code>csco</code> and <code>BRK.A</code> respectively. More
examples are given below.</p>

<p>The <code>CURL</code> argument
  specifies the relative URL for the controller and
  may include a module path
  <strong>but does not include Woof! application root</strong>.
  The last component is the controller name and any prior
  components specify the module. For example,
  <code>/x/y/z</code> in this component would be treated as
  the controller class <code>x::y::Z</code> or equivalently the
  controller <code>z</code> in module <code>x y</code>.
</p>

<p><code>ACTIONS</code> specifies the action methods for which the 
  definition is applicable. This may be a list of action names,
  an empty list which
  indicates the definition applies to all actions, or a string beginning
  with <code>implicit:</code> (for
  example, <code>implicit:display</code>.
  In this last case, the URL is treated as not having
  an action component and any remaining components after the controller
  are matched against parameter definitions. The string after the
  <code>implicit:</code> prefix is treated as the action method to
  invoke. An example is shown later.</p>

<p><code>PURL</code> is a URL path that defines additional parameters that
  are supplied in the rest of the URL. Note these are not the explicit
  parameters sent as part of a query or form post but rather additional
  parameters that may be merged with them. Each component in this
  <code>PURL</code> should have the format
  <code>PARAMNAME:REGEXP:DEFAULT</code>
  where <code>PARAMNAME</code> specifies the name of the parameter,
  <code>REGEXP</code>, if not empty, specifies a regular expression
  that the URL component should match, and <code>DEFAULT</code> is
  the default value to be used if the URL 
  component is missing. <code>DEFAULT</code> is actually passed through the
  Tcl <code>subst</code> command with <code>-nocommands</code> options
  hence variable
  definitions and backslash sequences can be used. However, characters
  that are special to Tcl will need to be escaped.</p>

<p>In addition, the <code>PARAMNAME</code> field of the last path
  component in <code>PURL</code> may begin with a <code>*</code>
  character in which case the corresponding
  parameter is a list of all remaining URL
  component values.</p>

<p>Note that any <code>:</code> character in a default value should be
  encoded using <code>\\u</code> Tcl escape sequences else it will be treated
  as the start of the default value as opposed to be embedded in it.</p>


<h3>Route matching</h3>
<p>Routes defined through the <code>curl</code> command are stored in
  the order the corresponding commands are executed, which is
  generally the order in which they occur in the file. Incoming
  requests are matched against the routes in this order and the first
  matching route is selected.</p>

<p>The matching algorithm first strips off the protocol scheme, host
  and port (if any) from the URL. The URL root of the Woof!
  application is also removed. The rest of the URL is then matched
  against each route definition with the first matching definition
  being selected.</p>

<p>For a match to succeed, all three portions of the definition -
  the controller URL, the action method name, and URL path embedded
  parameters (as opposed to query parameters) - must match. </p>

<h3>Examples</h3>
<p>These examples assume the host and application root URL 
  <span class='ug-filename'>http://www.mycompany.com/support/</span> 
  is stripped off (<span class='ug-filename'>support</span> being
  the application root) leaving behind a relative URL that is
  matched against routes.</p>

<h4>Route: simple route</h4>
[my _code_sample {
curl /ticket index
}]
<p>The relative URL <span class='ug-filename'>/ticket/index</span>
  would successfully match against this route and presumably show a list
  of support tickets.
  The action <code>index</code> in class
  <code>Ticket</code> would be invoked. Note the URL
  <span class='ug-filename'>/ticket/index/123</span> does not match
  this route as it has an additional URL component. In fact, this
  route definition is redundant since the
  [my _chapter_link default_dispatcher "default URL mapping"] behaviour
  will give the same result.
</p>

<h4>Route: using parameters</h4>
[my _code_sample {
curl /ticket display id
}]
<p>The relative URL <span class='ug-filename'>/ticket/display/123</span>
  would successfully match against this route.
  The action <code>display</code> in class
  <code>Ticket</code> would be invoked. The parameter with name
  <code>id</code> with a value of <code>123</code> would be passed to
  the method using the standard parameter passing mechanism described in the
  [my _chapter_link implementing_actions] chapter.
</p>

<h4>Route: multiple actions</h4>
[my _code_sample {
curl /ticket {display edit} id
}]
<p>This is similar to the previous route except that two actions are listed
  so both
  <span class='ug-filename'>/ticket/display/123</span> and
  <span class='ug-filename'>/ticket/edit/123</span> will match.
</p>

<h4>Route: matching on parameter syntax</h4>
[my _code_sample {
curl /ticket display {id:[[:digit:]]+:}
}]
<p>The problem with the route in the previous examples was that
  although <span class='ug-filename'>/ticket/display/123</span>
  would successfully match, so would the URL
  <span class='ug-filename'>/ticket/display/abc</span>, something that
  is probably undesired. Adding a regular expression to the parameter
  definition ensures that only numeric strings will match the parameter
  component for <code>id</code>. The URL 
  <span class='ug-filename'>/ticket/display/abc</span> would therefore
  not match the route.</p>

<p>The relative URL <span class='ug-filename'>/ticket/display</span>
  would also not match the route definition since no parameter is
  specified.</p>

<h4>Route: using default parameter values</h4>
[my _code_sample {
curl /ticket display {id:[[:digit:]]+:1}
}]

<h4>Route: using implicit actions</h4>
[my _code_sample {
curl /ticket implicit:display {id:[[:digit:]]+:}
}]
<p>You may also choose the <code>implicit</code> action method
  selection mechanism so that the <code>display</code> component is
  not required in the URL. So with the route definition in this example,
  the relative URL
  <span class='ug-filename'>/ticket/123</span> would result in
  same invocation of the <code>display</code> action method as above.
  Note that if you want URL's of the form shown in the previous examples 
  as well, both route definitions would need to be in place as this route
  will not match the URL's in the previous example.
</p>

<h4>Route: parameter with list values</h4>
[my _code_sample {
curl /ticket display {*id:[[:digit:]]+:}
}]

<p>Prefixing a parameter with the <code>*</code> character causes
  the parameter to collect the entire remaining portion of the URL as a
  list value. So in this example, relative URL's such as 
  <span class='ug-filename'>/ticket/display/12</span> and
  <span class='ug-filename'>/ticket/display/12/34/56</span>
  would both be accepted, with the <code>id</code> parameter set to
  lists <code>{12}</code> and <code>{12 34 56}</code> respectively.</p>

<h4>Example: using Tcl code in route definition files</h4>
[my _code_sample {
  set year_regex {[[:digit:]]{4}}
  set month_regex {[[:digit:]]{1,2}}
  set day_regex {[[:digit:]]{1,2}}
  set date_params year:${year_regex}:/month:${month_regex}:/day:${day_regex}:
  foreach controller {blog article} {
      curl "/$controller" implicit:display $date_params
  }
}]

<p>This Tcl fragment in a route definition file would set up two routes
  which would match URL's of the form
  <span class='ug-filename'>/blog/2009/1/21</span> or
  <span class='ug-filename'>/article/2009/1/21</span> and invoke the
  <code>display</code> action on the <code>Blog</code> or <code>Article</code>
  controllers respectively.</p>
